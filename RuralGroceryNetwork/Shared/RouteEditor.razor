<!--
Copyright 2020 Kansas State University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

@using GroceryLibrary
@using GroceryLibrary.Models


@inject IJSRuntime JS
<!-- Javascript ArcGIS map Div setup -->
<meta charset="utf-8">
<meta name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no">
<title>ArcGIS</title>
<style onload="CreateMap()">

    #viewDiv {
        padding: 0;
        margin: 5px;
        height: 475px;
        width: 800px;
    }
</style>


<link rel="stylesheet" href="https://js.arcgis.com/4.14/esri/themes/light/main.css">



<!-- The Main Div that contains everything in the map; used in this way to display the map components next to eachothers.-->
<div class="float-container">

    <div class="float-child1">
        <body id="row1" onload="CreateMap()">
            <div>
                <div id="Fields">
                    <!-- Route Radius Size field -->
                    <div class="form-field">
                        <label>Radius Size (Miles):</label>
                        <div>
                            <input id="radius" @bind="RouteState.Radius_Size" />
                        </div>
                    </div>

                    <!-- Route supply field -->
                    <div class="form-field">
                        <label>Radius Center:</label>
                        <div>
                            <input id="x-long-input" @bind="RouteState.Radius_Start_x" />
                            <input id="y-lat-input" @bind="RouteState.Radius_Start_y" />
                        </div>
                        <div>
                            <button @onclick="GetRadius">Get Radius</button>
                            <button @onclick="LoadStores">Load All Stores and Distributors</button>
                            <p style="float: left;">Variable:<br /> Weekly Purchase Amount</p><br /><br />
                            <label class="switch" style="float: left;">
                                <input type="checkbox" id="scenario-variable" onclick="updateVariable()">
                                <span class="slider round"></span>
                            </label>
                            <p style="float: left;">Population</p>
                        </div>
                    </div>
                    <p>
                        <br /><br />
                        <a onclick="showModal('instruction-modal')" href="javascript:void(0)">Instructions</a>
                    </p>
                    <div id="instruction-modal" class="modal">
                        <div class="modal-content">
                            <span class="modal-close">&times;</span>
                            <h3 style="text-align: center;">Instructions for the Scenarios Page</h3>
                            <h4>Purpose</h4>
                            <p>The purpose of this page is to be able to see all the stores on a map to create a radius
                               around an existing store or a future store. From there you can add or subtract stores
                               within that radius to see if that group of stores meet the minimum amount. There are two
                               variables that can be used to check the minimum amount: weekly purchase amount and population
                            </p>
                            <h4>Adding Stores and Distributors to the Map</h4>
                            <p>To add stores to the map click the Load All Stores and Distributors button. This will then
                               add the points of all the stores to the map using the specified variable mentioned below.
                               In the bottom right there is a key showing what each store color on the map represents</p>
                            <h4>Changing the Variable</h4>
                            <p>As mentioned there are two variables that can be used: weekly purchase amount and population.
                               A lot of stores at this time do not have a weekly purchase amount, so you may want to use
                               the population variable. To change the variable, toggle the slider to the left to use 
                               weekly purchase amount and to the right for population. This will change all the points on
                               the map and the list of stores in a radius to the specified variable.</p>
                            <h4>Adding a Radius</h4>
                            <p>
                                After loading the stores you may click on a store and it will by default create a 25 mile
                                radius around that store. This can be changed in the first textbox labeled radius. To update
                                the radius type in the new distance you want and either select the Get Radius button or select
                                the store you want the radisu around. From there it will create a list of stores in that radius
                                with the center point first. It will give information for each store including address, the
                                specified variable amount, and distance to the center store (by car).
                            </p>
                            <h4>Summary List</h4>
                            <p>
                                The summary list shows the number of stores in the radius, the variable amount for all the stores
                                in the radius, variable amount for selected stores, the minimum variable about, and if the minimum
                                amount has been reached. These things will help with determining if the stores selected can work
                                together to achieve that minimum requirement.
                            </p>
                            <h4>Adding Stores to the Summary List</h4>
                            <p>
                                In order to add or subtract stores from the amount, to the left of the stores (except the center
                                store which is automattically included) there is a checkbox. Check the checkbox if you want to
                                include the store in the calculation or uncheck it to remove it. The amounts in the summary list
                                will update accordingly and say if you have reached the minimum amount.
                            </p>
                        </div>
                    </div>
                    <br />
                    <div id="radius-stores"></div>
                    <br />
                </div>
            </div>
        </body>
    </div>

    <div class="float-child2">

        <div id="MapDiv">

            <!-- The div that the map get displayed inside of -->
            <div id="viewDiv"></div>

            <!-- Various options for changing the MapBase -->
            <label for="Map" display="float:right">Choose a MapBase:</label>
            <select id="MapBase" @onchange="ChangeMapBase" display="float:right">
                <option value="streets-navigation-vector">streets navigation vector</option>
                <option value="streets">streets</option>
                <option value="topo">topo</option>
                <option value="satellite">satellite</option>
                <option value="hybrid">hybrid</option>
                <option value="dark-gray">dark-gray</option>
                <option value="national-geographic">national-geographic</option>
                <option value="oceans">oceans</option>
                <option value="osm">osm</option>
                <option value="streets-night-vector">streets-night-vector</option>
                <option value="topo-vector">topo-vector</option>
            </select>
            <br />
            <label style="font-style: italic;">  Lat / Lon</label>
        </div>

        <!-- A summary table for the weekly purchase amounts (added via js)-->
        <div id="summary" style="width: 60%; float: left;"></div>
        <!-- A legend for the stores on the map and weekly purchase amounts -->
        <div id="weekly-purchase-map-legend" style="float:right; width: 40%; display: none;">
            <h4>Weekly Purchase Amount</h4>
            <ul style="background-color: black;">
                <li style="color: #E6E6FA;">$0 / NA</li>
                <li style="color: #D8BFD8">$1 - $4,999</li>
                <li style="color: #EE82EE">$5,000 - $9,999</li>
                <li style="color: #9370DB">$10,000 - $14,999</li>
                <li style="color: #8A2BE2">$15,000 - $19,999</li>
                <li style="color: #4B0082">$20,000 - $36,000</li>
                <li style="color: yellow">Distributors</li>
            </ul>
        </div>
        <div id="population-map-legend" style="float:right; width: 40%; display: none;">
            <h4>Population</h4>
            <ul style="background-color: black;">
                <li style="color: #E6E6FA;">1 - 99</li>
                <li style="color: #D8BFD8">100 - 499</li>
                <li style="color: #EE82EE">500 - 999</li>
                <li style="color: #9370DB">1,000 - 1,499</li>
                <li style="color: #8A2BE2">1,500 - 1,999</li>
                <li style="color: #4B0082">2,000+</li>
                <li style="color: yellow">Distributors</li>
            </ul>
        </div>
    </div>
</div>




@code {
    /// <summary>
    /// Stores the state of the Route
    /// </summary>
    [Parameter] public RouteState RouteState { get; set; }

    /// <summary>
    /// Change the Base Map Style for the Arcgis Map
    /// </summary>
    new async Task CreateMap()
    {
        await JS.InvokeVoidAsync(identifier: "CreateMap");
        //LoadStores();
    }

    /// <summary>
    /// Change the Base Map Style for the Arcgis Map
    /// </summary>
    new async Task ChangeMapBase()
    {

        await JS.InvokeVoidAsync(identifier: "ChangeMapBase");
    }

    /// <summary>
    /// Recenter the map on a given latitude  and longitude
    /// </summary>
    async Task CenterMap(double lat, double lon)
    {
        await JS.InvokeVoidAsync(identifier: "centerMap", lat, lon);
    }

    /// <summary>
    /// Add a node on the map on a given latitude  and longitude
    /// </summary>
    async Task MapInput(double lat, double lon)
    {
        await JS.InvokeVoidAsync(identifier: "MapInput", lat, lon);
        await JS.InvokeVoidAsync(identifier: "centerMap", lat, lon);
    }



    /// <summary>
    /// Loads the javascript Arcgis Map
    /// </summary>
    //async Task LoadMap()
    //{
    //await JS.InvokeVoidAsync("CreateMap");
    //}

    /// <summary>
    /// Calls GetRadius from Route.js to load a radius onto map
    /// </summary>
    async Task GetRadius()
    {
        await JS.InvokeVoidAsync("GetRadius");
    }

    /// <summary>
    /// Loads Stores, distributors, and legend onto the map
    /// </summary>
    async Task LoadStores()
    {
        List<Store> allStores = SqlDataAccess.getAllStores();
        List<Distributor> allDist = SqlDataAccess.getAllDistributors();

        await JS.InvokeVoidAsync("setAllStores", allStores);
        await JS.InvokeVoidAsync("setAllDistributors", allDist);
        await JS.InvokeVoidAsync("addAllStores");
        await JS.InvokeVoidAsync("addAllDistributors");

        //Calls Route.js to load each store in List<Store> allStores to the map as a blue node
        /*foreach (Store s in allStores)
        {
            await JS.InvokeVoidAsync("addGraphic", s, s.YLAT, s.XLONG, "");
        }
        //Calls Route.js to load each store in List<Distributor> allDist to the map as a yellow node
        foreach (Distributor d in allDist)
        {
            await JS.InvokeVoidAsync("addGraphic", d, d.YLAT, d.XLONG, "yellow");
        }*/
    }

    /* First attempt, maybe useful still
    async Task addStoresToMap()
    {
        List<Store> allStores = SqlDataAccess.getAllStores();

        foreach(Store s in allStores)
        {
            await JS.InvokeVoidAsync(identifier: "addGraphic", s.XLONG, s.YLAT);
        }
    }
    */

    /*protected override bool ShouldRender()
    {
        var renderUI = true;

        return renderUI;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await LoadStores();
    }*/

    /*protected override async Task OnInitializedAsync()
    {
        //LoadStores();
            List<Store> allStores = SqlDataAccess.getAllStores();
            List<Distributor> allDist = SqlDataAccess.getAllDistributors();

            //Calls Route.js to load each store in List<Store> allStores to the map as a blue node
            foreach (Store s in allStores)
            {
                await JS.InvokeVoidAsync("addGraphic", s, s.YLAT, s.XLONG, "");
            }
            //Calls Route.js to load each store in List<Distributor> allDist to the map as a yellow node
            foreach (Distributor d in allDist)
            {
                await JS.InvokeVoidAsync("addGraphic", d, d.YLAT, d.XLONG, "yellow");
            }

            //Calls Route.js to load in the legend
            await JS.InvokeVoidAsync("displayLegend");
    }*/
}
