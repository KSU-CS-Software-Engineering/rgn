<!--
Copyright 2020 Kansas State University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

@using GroceryLibrary
@using GroceryLibrary.Models.Database
@using System.Text
@using GroceryLibrary.Models

@inject IJSRuntime JS
<!-- Javascript ArcGIS map Div setup -->
<meta charset="utf-8">
<meta name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no">
<title>ArcGIS</title>

<div>

    <div>
        <body id="row1">
            <div>
                <p>
                    @pageContent[0].Content
                </p>
                <h4>@pageContent[1].HeaderName</h4>
                <p>
                    @pageContent[1].Content
                </p>
                <h4>@pageContent[2].HeaderName</h4>
                <p>@pageContent[2].Content</p>
                <h4>@pageContent[3].HeaderName</h4>
                <p>
                    @pageContent[3].Content
                </p>
                <h4>@pageContent[4].HeaderName</h4>
                <p>@pageContent[4].Content</p>
                <h4>@pageContent[5].HeaderName</h4>
                <p>@pageContent[5].Content</p>
                <p>
                    @pageContent[6].Content
                </p>
                <p>@pageContent[7].Content</p>
                <div id="Btnz">
                    <!-- button for opening the import page -->
                    <br />
                    <button @onclick="enableImportPage" class="btn-1">Import Stores from .csv</button>

                    <!-- button for download Store Information table from DB-->
                    <button @onclick="downloadTables">Download Tables</button>
                </div>
            </div>
        </body>
    </div>
</div>




<!-- display the Import node Page -->
@if (ShowImportPage)
{
    <ImportNodePage Nodes="nodes" Close="disableImportPage" />
}

<!-- Display the Node List  page -->
@if (ShowNodeList)
{
    <NodeListPage Close="disableNodeList" Nodes="nodes" />
}



@code {

    List<Page> pageContent = SqlDataAccess.getPageContent("Admin");

    /// <summary>
    /// List of nodes
    /// </summary>
    List<Node> nodes = new List<Node>();

    /// <summary>
    /// Change the Base Map Style for the Arcgis Map
    /// </summary>
    async Task ChangeMapBase()
    {

        await JS.InvokeVoidAsync(identifier: "ChangeMapBase");
    }

    /// <summary>
    /// Recenter the map on a given latitude  and longitude
    /// </summary>
    async Task CenterMap(double lat, double lon)
    {
        await JS.InvokeVoidAsync(identifier: "centerMap", lat, lon);
    }

    /// <summary>
    /// Add a node on the map on a given latitude  and longitude
    /// </summary>
    async Task MapInput(double lat, double lon)
    {
        await JS.InvokeVoidAsync(identifier: "MapInput", lat, lon);
        await JS.InvokeVoidAsync(identifier: "centerMap", lat, lon);
    }



    /// <summary>
    /// Loads the javascript Arcgis Map
    /// </summary>
    async Task LoadMap()
    {
        await JS.InvokeVoidAsync("CreateMap");
    }



    /// <summary>
    /// Value that stores if list of nodes is displayed
    /// </summary>
    bool ShowNodeList = false;

    /// <summary>
    /// Value that stores to show import nodes list
    /// </summary>
    bool ShowImportPage = false;

    [Parameter] public NodeState NodeState { get; set; }

    /// <summary>
    /// Adds node to list of nodes from inputed data
    /// </summary>
    void AddNodes(string name, string demand, string supply, double longitude, double lattitude)
    {
        Node X = new Node();
        X.State.Name = name;
        X.State.Demand = demand;
        X.State.Supply = supply;
        X.State.Location_x = longitude;
        X.State.Location_y = lattitude;
        nodes.Add(X);

        //NodeState.Name = "";
    }

    /// <summary>
    /// Clears all nodes from list
    /// </summary>
    void RemoveNodes()
    {
        nodes.Clear();

    }

    /// <summary>
    /// Hides list of nodes page
    /// </summary>
    void disableNodeList()
    {
        ShowNodeList = false;
    }

    /// <summary>
    /// Opens node list page
    /// </summary>
    void enableNodeList()
    {
        ShowNodeList = true;
    }

    /// <summary>
    /// Hides import page
    /// </summary>
    void disableImportPage()
    {
        ShowImportPage = false;
    }

    /// <summary>
    /// Opens import nodes page
    /// </summary>
    void enableImportPage()
    {
        ShowImportPage = true;
    }

    /// <summary>
    /// Controls the downloading of all the tables from the database. This is called from the button on the webpage
    /// </summary>
    /// <returns></returns>
    async Task downloadTables()
    {
        List<string> allcsv = new List<string>();

        allcsv.Add(SqlDataAccess.DBTableToCSV(DatabaseTables.STATES));

        allcsv.Add(SqlDataAccess.DBTableToCSV(DatabaseTables.CITIES));

        allcsv.Add(SqlDataAccess.DBTableToCSV(DatabaseTables.DISTRIBUTOR));

        allcsv.Add(SqlDataAccess.DBTableToCSV(DatabaseTables.STORE_INFORMATION));

        allcsv.Add(SqlDataAccess.DBTableToCSV(DatabaseTables.STORE_DELIVERY_INFORMATION));

        //If new tables are added, just make the same call to DBTableToCSV and add to the list. The following loop creates one file for all tables.

        StringBuilder csv = new StringBuilder();

        foreach (string s in allcsv)
        {
            csv.Append(s);
            csv.Append("|\n");
        }

        byte[] file = System.Text.Encoding.UTF8.GetBytes(csv.ToString());
        string temp = csv.ToString();
        await JS.InvokeVoidAsync("BlazorDownloadFile", "AllFiles.csv", "text/plain", file);


    }
}
