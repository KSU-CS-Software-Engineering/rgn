<!--
Copyright 2020 Kansas State University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

@using GroceryLibrary
@using GroceryLibrary.Models.Database
@using System.Text

@inject IJSRuntime JS
<!-- Javascript ArcGIS map Div setup -->
<meta charset="utf-8">
<meta name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no">
<title>ArcGIS</title>
<!--
<style onload="CreateMap()">

    #viewDiv {
        padding: 0;
        margin: 5px;
        height: 475px;
        width: 800px;
    }
</style>


<link rel="stylesheet" href="https://js.arcgis.com/4.14/esri/themes/light/main.css">
-->
<!-- The Main Div that contains everything in the map; used in this way to display the map components next to eachothers.-->

<div >

    <div >
        <body id="row1">
            <div>
               <p>This page is for maintaining the elements inside of the database. To begin, click on the "Download Tables" button to download the current elements in 
               the tables. It works best to open this file in Excel to make changes to the database. From here, you can add, delete, or update data for stores, cities, or states.
                    </p>  
                <h4>To Add:</h4>
                <p> To add a new item to the database, first find the correct table within the .csv file you downloaded. Go to the bottom of that table and add a new row after the last element.
                The first column is the column id, which you should make 1 larger than the existing final element. After that, fill in the information appropriately in each column.
                To get the X and Y coordinates, it works well to go to Google Maps and search for the store, then in the URL there will be the coordinates for the store.</p>
                <h4>To Update:</h4>
                <p>To update any store in the database, simply find the row in the table that has its information, and make whatever changes are necessary.</p>
                <h4>To Delete:</h4>
                <p>To delete any row from the database, all you have to do is remove it from the .csv file. However, there are a few catches to that. If you delete a city, you will have
                to update the store that was in that city to have a new city, or delete that store. (You can find this by matching the "CityId" columns in each table. The same goes for
                deleting a store from the table, then you must delete its matching StoreInformation item (some stores won't have this).</p>
                <h4>To Upload:</h4>
                <p>To upload the changes, simply click the "Import Stores from .csv" button then choose your updated and saved file.</p>
                <h4>Other Important Notes:</h4>
                <p>First, it is important that when entering any information in the .csv file, you do not use a comma (,) anywhere within the file.</p>
                <p>Second, please enter information in every column if you are adding any new rows (no blank entries). If you don't know/have the information,
                just enter 0 if its a number, or "None" if its a description.</p>
                <p>Third, please keep the "|" characters between each table.</p>
                <div id="Btnz">
                    <!-- button for opening the import page -->
                    <br />
                    <button @onclick="enableImportPage" class="btn-1">Import Stores from .csv</button>

                    <!-- button for download Store Information table from DB-->
                    <button @onclick="downloadTables">Download Tables</button>
                </div>
            </div>
        </body>
    </div>
</div>




<!-- display the Import node Page -->
@if (ShowImportPage)
{
    <ImportNodePage Nodes="nodes" Close="disableImportPage" />
}

<!-- Display the Node List  page -->
@if (ShowNodeList)
{
    <NodeListPage Close="disableNodeList" Nodes="nodes" />
}



@code {


    /// <summary>
    /// List of nodes
    /// </summary>
    List<Node> nodes = new List<Node>();

    /// <summary>
    /// Change the Base Map Style for the Arcgis Map
    /// </summary>
    async Task ChangeMapBase()
    {

        await JS.InvokeVoidAsync(identifier: "ChangeMapBase");
    }

    /// <summary>
    /// Recenter the map on a given latitude  and longitude
    /// </summary>
    async Task CenterMap(double lat, double lon)
    {
        await JS.InvokeVoidAsync(identifier: "centerMap", lat, lon);
    }

    /// <summary>
    /// Add a node on the map on a given latitude  and longitude
    /// </summary>
    async Task MapInput(double lat, double lon)
    {
        await JS.InvokeVoidAsync(identifier: "MapInput", lat, lon);
        await JS.InvokeVoidAsync(identifier: "centerMap", lat, lon);
    }



    /// <summary>
    /// Loads the javascript Arcgis Map
    /// </summary>
    async Task LoadMap()
    {
        await JS.InvokeVoidAsync("CreateMap");
    }



    /// <summary>
    /// Value that stores if list of nodes is displayed
    /// </summary>
    bool ShowNodeList = false;

    /// <summary>
    /// Value that stores to show import nodes list
    /// </summary>
    bool ShowImportPage = false;

    [Parameter] public NodeState NodeState { get; set; }

    /// <summary>
    /// Adds node to list of nodes from inputed data
    /// </summary>
    void AddNodes(string name, string demand, string supply, double longitude, double lattitude)
    {
        Node X = new Node();
        X.State.Name = name;
        X.State.Demand = demand;
        X.State.Supply = supply;
        X.State.Location_x = longitude;
        X.State.Location_y = lattitude;
        nodes.Add(X);

        //NodeState.Name = "";
    }

    /// <summary>
    /// Clears all nodes from list
    /// </summary>
    void RemoveNodes()
    {
        nodes.Clear();

    }

    /// <summary>
    /// Hides list of nodes page
    /// </summary>
    void disableNodeList()
    {
        ShowNodeList = false;
    }

    /// <summary>
    /// Opens node list page
    /// </summary>
    void enableNodeList()
    {
        ShowNodeList = true;
    }

    /// <summary>
    /// Hides import page
    /// </summary>
    void disableImportPage()
    {
        ShowImportPage = false;
    }

    /// <summary>
    /// Opens import nodes page
    /// </summary>
    void enableImportPage()
    {
        ShowImportPage = true;
    }

    /// <summary>
    /// Controls the downloading of all the tables from the database. This is called from the button on the webpage
    /// </summary>
    /// <returns></returns>
    async Task downloadTables()
    {
        List<string> allcsv = new List<string>();

        allcsv.Add(SqlDataAccess.DBTableToCSV(DatabaseTables.STATES));

        allcsv.Add(SqlDataAccess.DBTableToCSV(DatabaseTables.CITIES));

        allcsv.Add(SqlDataAccess.DBTableToCSV(DatabaseTables.DISTRIBUTOR));

        allcsv.Add(SqlDataAccess.DBTableToCSV(DatabaseTables.STORE_INFORMATION));

        allcsv.Add(SqlDataAccess.DBTableToCSV(DatabaseTables.STORE_DELIVERY_INFORMATION));

        //If new tables are added, just make the same call to DBTableToCSV and add to the list. The following loop creates one file for all tables.

        StringBuilder csv = new StringBuilder();

        foreach (string s in allcsv)
        {
            csv.Append(s);
            csv.Append("|\n");
        }

        byte[] file = System.Text.Encoding.UTF8.GetBytes(csv.ToString());
        string temp = csv.ToString();
        await JS.InvokeVoidAsync("BlazorDownloadFile", "AllFiles.csv", "text/plain", file);


    }
}
